require(MASS)
require(ggplot2)
require(gridExtra)
Niter <- 10000
BurnIn <- 100
TotIter <- Niter+BurnIn
N <- 1000
b0 <- 1.4
b1 <- -0.8
b2 <- 1.5
b3 <- 0.5
betas <- c(b0,b1,b2,b3)
sigma <- 4
AuxBurnIn <- 1
x1 <- rbinom(n = N, prob = 0.5, size = 1)
x2 <- rpois(n = N, lambda = 5)
x3 <- round(rnorm(n = N, mean = 0, sd = 4),2)
e <- rnorm(n = N, mean = 0, sd = sqrt(sigma))
X <- cbind(rep(1,N),x1, x2, x3)
y <- rnorm(n = N, mean = betas[1] + betas[2]*x1 + betas[3]*x2 + betas[4]*x3 + e)
head(X)
y[1:!0]
y[1:10]
!0
## Defining prior distributions
## ----------------------------
## Betas Laplace(m_{i}, v_{i})
## ----------------------------
m = rbind(0,0,0,0)
v = rbind(1,1,1,1)
## Data frame that will store MCMC values for betas
## ------------------------------------------------
SaveResults <- as.data.frame(matrix(data = NA, nrow = Niter, ncol = length(betas)+1))
colnames(SaveResults) <- c('Iter', 'Beta0', 'Beta1', 'Beta2', 'Beta3')
## Initial values for Betas and covariance matrix of the proposal distribution
## ---------------------------------------------------------------------------
MCMCBetasI <- c(0,0,0,0)
V = diag(4)*0.0005
i
i=1
MCMCBetasC <- mvrnorm(1, MCMCBetasI, V)
razao <- (-0.5*sigma*(t(y-X%*%MCMCBetasC)%*%(y-X%*%MCMCBetasC) - sum(abs(MCMCBetasC - m)/v))) -
(-0.5*sigma*(t(y-X%*%MCMCBetasI)%*%(y-X%*%MCMCBetasI) - sum(abs(MCMCBetasI - m)/v)))
if(runif(1) < min(1, exp(razao)))
{MCMCBetasI <- MCMCBetasC}
MCMCBetasI
MCMCBetasC
