% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MOTR_BART.R
\name{motr_bart}
\alias{motr_bart}
\title{MOTR-BART for continuous outcomes}
\usage{
motr_bart(
  x,
  y,
  ntrees = 10,
  node_min_size = 5,
  alpha = 0.95,
  beta = 2,
  nu = 3,
  lambda = 0.1,
  sigma2 = 1,
  nburn = 1000,
  npost = 1000,
  nthin = 1
)
}
\arguments{
\item{x}{The design matrix containing the covariates that will be used in the regression}

\item{y}{Continuous response variable}

\item{ntrees}{The number of trees. Default is 10.}

\item{node_min_size}{Set the size of the smallest node. Default is 5.}

\item{alpha}{The parameter of the prior for the tree. It should be a value within (0,1). Default is 0.95.}

\item{beta}{The parameter of the prior for the tree. It should be a value greater than or equal to 0. Default is 2.}

\item{nu}{The shape of the prior for the variance.}

\item{lambda}{The scale of the prior for the variance.}

\item{sigma2}{An inital estimate of the variance.}

\item{nburn}{Number of MCMC iterations for the burn-in period}

\item{npost}{Number of MCMC iterations that should be performed after the burn-in period}

\item{nthin}{The amount of thinning that should considered. If it is greater than 1, then the draws every "nthin" iterations will be returned.}
}
\value{
The following objects are returned by \code{motr_bart} function:

\code{tau_b} = tau_b_store

\code{log_lik} = log_lik_store

\code{y_hat} = y_hat_store*y_sd + y_mean

\code{full_cond}= full_cond_store
\code{y} = y

\code{center_X} = center

\code{scale_X} = scale

\code{npost} = npost

\code{nburn} = nburn

\code{nthin} = nthin

\code{store_size} = store_size

\code{ntrees} = ntrees

\code{y_mean} = y_mean

\code{y_sd} = y_sd
}
\description{
MOTR-BART for continuous outcomes
}
\examples{

# Simulate a Friedman data set
friedman_data = function(n, num_cov, sd_error){
 x = matrix(runif(n*num_cov),n,num_cov)
 y = 10*sin(pi*x[,1]*x[,2]) + 20*(x[,3]-.5)^2+10*x[,4]+5*x[,5] + rnorm(n, sd=sd_error)
 return(list(y = y,
             x = x))
}
data = friedman_data(200, 10, 1)
y = data$y
x = data$x

# Run MOTR-BART
set.seed(99)
fit.motr.bart = motr_bart(x, y, ntrees = 10, nburn = 100, npost = 100)
yhat = apply(fit.motr.bart$y_hat, 2, mean)
plot(y, yhat); abline(0, 1)
}
